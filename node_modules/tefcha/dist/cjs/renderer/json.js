"use strict";
// output JSON for debug.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Renderer = exports.render = void 0;
var parser_1 = require("../parser");
var flowchart_1 = require("../flowchart");
var config_1 = require("../config");
var Renderer = /** @class */ (function () {
    function Renderer(_a) {
        var _this = this;
        var src = _a.src;
        this.el = function (tagName, attrs) {
            var children = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                children[_i - 2] = arguments[_i];
            }
            var e = _this._document.createElementNS('http://www.w3.org/2000/svg', tagName);
            Object.entries(attrs || {})
                .forEach(function (_a) {
                var k = _a[0], v = _a[1];
                return e.setAttribute(k === 'className' ? 'class' : k, v.toString());
            });
            (children || []).forEach(function (child) { return e.append(child); });
            return e;
        };
        this.createTextSVGElement = function (text, attrs) {
            var el = _this.el;
            var textSVG = el('text', attrs || {});
            text.split(/\\n/).forEach(function (line, idx) {
                textSVG.append(el('tspan', { x: attrs.x, dy: (idx === 0 ? 0 : 1) + "em" }, line));
            });
            return textSVG;
        };
        this.measureText = function (text, attrs) {
            if (attrs === void 0) { attrs = {}; }
            var _a = _this, dummySVG = _a.dummySVG, createTextSVGElement = _a.createTextSVGElement;
            var _attrs = __assign(__assign({}, attrs), { x: (attrs.x || 0) });
            _this._document.body.append(dummySVG);
            var textSVG = createTextSVGElement(text, _attrs);
            dummySVG.append(textSVG);
            var _b = textSVG.getBoundingClientRect(), width = _b.width, height = _b.height;
            dummySVG.removeChild(textSVG);
            _this._document.body.removeChild(dummySVG);
            return { w: width, h: height };
        };
        this.renderShape = function (_a) {
            var jsonOutput = _a.jsonOutput, shape = _a.shape, config = _a.config, _b = _a.offsetX, offsetX = _b === void 0 ? 0 : _b, _c = _a.offsetY, offsetY = _c === void 0 ? 0 : _c;
            var renderShape = _this.renderShape;
            var x = offsetX + shape.x;
            var y = offsetY + shape.y;
            switch (shape.type) {
                case 'group':
                    shape.children.forEach(function (child) { return renderShape({ jsonOutput: jsonOutput, config: config, shape: child, offsetX: x, offsetY: y }); });
                    break;
                case 'text':
                case 'path':
                case 'rect':
                case 'frame':
                case 'diamond':
                case 'point':
                    jsonOutput.push(__assign(__assign({}, shape), { x: x, y: y, w: shape.w, h: shape.h }));
                    break;
                default:
                    var _ = shape;
                    throw "shape " + _ + " is invalid";
            }
        };
        this.render = function () {
            var _a = _this, src = _a.src, config = _a.config, measureText = _a.measureText, renderShape = _a.renderShape;
            var jsonOutput = [];
            var flowchart = flowchart_1.createFlowchart({
                node: parser_1.parse(src, config),
                config: config,
                measureText: measureText,
            });
            renderShape({
                jsonOutput: jsonOutput,
                shape: flowchart.shapes,
                config: config,
            });
            return jsonOutput;
        };
        this._document = document;
        this.src = src;
        this.config = config_1.mergeDefaultConfig();
        this.dummySVG = this.el('svg');
    }
    return Renderer;
}());
exports.Renderer = Renderer;
var render = function (param) {
    return new Renderer(param).render();
};
exports.render = render;
//# sourceMappingURL=json.js.map
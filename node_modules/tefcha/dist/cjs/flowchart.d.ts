import { ASTNode } from './parser';
import { MeasureTextFunc, Shape, Group, Point, Text, TextSize } from './shape';
import { Config } from './config';
import { RangeAllocator } from './range-allocator';
declare type LoopType = 'while' | 'doWhile' | 'for' | 'none';
interface CondPosition {
    readonly E: {
        x: number;
        y: number;
    };
    readonly W: {
        x: number;
        y: number;
    };
    readonly S: {
        x: number;
        y: number;
    };
}
declare class LoopStackInfo {
    readonly type: LoopType;
    readonly breaks: Point[];
    readonly continues: Point[];
    constructor(type?: LoopType);
}
declare class Flowchart {
    readonly type: 'flowchart';
    readonly shapes: Group;
    readonly config: Config;
    private readonly measureText;
    loop: LoopStackInfo;
    AllocW: RangeAllocator;
    AllocE: RangeAllocator;
    alive: boolean;
    readonly dx: number;
    readonly dy: number;
    readonly hlineMargin: number;
    readonly yesTextSize: TextSize;
    readonly noTextSize: TextSize;
    x: number;
    y: number;
    constructor({ shapes, measureText, config, loop, AllocW, AllocE, x, y, yesTextSize, noTextSize, }: {
        config: Config;
        measureText: MeasureTextFunc;
        loop: LoopStackInfo;
        AllocW: RangeAllocator;
        AllocE: RangeAllocator;
        shapes: Group;
        x: number;
        y: number;
        yesTextSize: TextSize;
        noTextSize: TextSize;
    });
    shiftX: (x: number) => void;
    step: (distance?: number, isArrow?: boolean) => void;
    stepAbs: (y: number, isArrow?: boolean) => void;
    move: (distance?: number) => void;
    moveAbs: (y: number) => void;
    private rect;
    diamond: ({ x, y, text }: {
        x: number;
        y: number;
        text: string;
    }) => Shape;
    private wrapText;
    private text;
    textWithAutoSize: ({ x, y, text, isLabel }: {
        x: number;
        y: number;
        text: string;
        isLabel: boolean;
    }) => Text;
    stepText: (content: string) => void;
    stepCond: ({ content, yesDir, noDir, jumpW, jumpE, stepY, }: {
        content: string;
        yesDir: 'W' | 'S' | 'E';
        noDir: 'W' | 'S' | 'E';
        jumpW: boolean;
        jumpE: boolean;
        stepY?: number | undefined;
    }) => CondPosition;
    branch: () => Flowchart;
    merge: (flowchart: Flowchart) => void;
    withLoop: (type: LoopType, func: () => void) => LoopStackInfo;
    h: (y: number, text?: string) => void;
}
declare const createFlowchart: ({ node, config, measureText, }: {
    node: ASTNode;
    config: Config;
    measureText: MeasureTextFunc;
}) => Flowchart;
export { createFlowchart, Flowchart, };
//# sourceMappingURL=flowchart.d.ts.map
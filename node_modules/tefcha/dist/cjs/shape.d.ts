declare class BaseShape {
    x: number;
    y: number;
    w: number;
    h: number;
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
    constructor({ x, y, w, h, minX, minY, maxX, maxY, }: {
        x?: number;
        y?: number;
        w?: number;
        h?: number;
        minX?: number;
        minY?: number;
        maxX?: number;
        maxY?: number;
    });
    trans: (dx: number, dy: number) => BaseShape;
}
declare class Point extends BaseShape {
    type: 'point';
    constructor({ x, y }: {
        x: number;
        y: number;
    });
    clone: () => Point;
}
declare type PathCmd = ['v' | 'h', number];
declare class Path extends BaseShape {
    readonly type: 'path';
    readonly cmds: PathCmd[];
    readonly isArrow?: boolean;
    constructor({ x, y, cmds, isArrow }: {
        x: number;
        y: number;
        cmds: PathCmd[];
        isArrow?: boolean;
    });
    static vline: ({ x, y, step, isArrow }: {
        x: number;
        y: number;
        step: number;
        isArrow?: boolean | undefined;
    }) => Path;
    static hline: ({ x, y, step, isArrow }: {
        x: number;
        y: number;
        step: number;
        isArrow?: boolean | undefined;
    }) => Path;
}
declare class Text extends BaseShape {
    readonly type: 'text';
    readonly content: string;
    readonly isLabel?: boolean;
    constructor({ content, w, h, x, y, isLabel, }: {
        content: string;
        x?: number;
        y?: number;
        w: number;
        h: number;
        isLabel?: boolean;
    });
    static byMeas: ({ x, y, text, attrs, meas, isLabel }: {
        x?: number | undefined;
        y?: number | undefined;
        text: string;
        attrs: any;
        meas: MeasureTextFunc;
        isLabel?: boolean | undefined;
    }) => Text;
}
declare class Rect extends BaseShape {
    readonly type: 'rect';
    constructor({ x, y, w, h }: {
        x?: number;
        y?: number;
        w: number;
        h: number;
    });
}
declare class Frame extends BaseShape {
    readonly type: 'frame';
    constructor({ x, y, w, h }: {
        x?: number;
        y?: number;
        w: number;
        h: number;
    });
}
declare class Diamond extends BaseShape {
    readonly type: 'diamond';
    constructor({ x, y, w, h }: {
        x?: number;
        y?: number;
        w: number;
        h: number;
    });
}
declare class Group extends BaseShape {
    readonly type: 'group';
    readonly children: Shape[];
    constructor({ x, y, children }: {
        x: number;
        y: number;
        children: Shape[];
    });
    add: (shape: Shape) => Group;
}
declare type Shape = Point | Path | Text | Rect | Frame | Diamond | Group;
declare type ShapeType = Shape['type'];
interface TextSize {
    readonly w: number;
    readonly h: number;
}
declare type MeasureTextFunc = (text: string, attrs?: any) => TextSize;
export { Point, Path, Text, Rect, Frame, Diamond, Group, Shape, ShapeType, BaseShape, PathCmd, MeasureTextFunc, TextSize, };
//# sourceMappingURL=shape.d.ts.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var TefchaError = /** @class */ (function (_super) {
    __extends(TefchaError, _super);
    function TefchaError(_a) {
        var lineno = _a.lineno, msg = _a.msg, _b = _a.src, src = _b === void 0 ? '' : _b;
        var _this = this;
        var RANGE_LINES = 5;
        var mainMsg = msg;
        if (lineno && lineno > 0) {
            mainMsg = "at line " + lineno + ": " + mainMsg;
        }
        var positionInfo = '';
        if (src && lineno !== undefined && lineno > 0) {
            positionInfo = src.split(/\n/)
                .map(function (line, idx) { return ({ lineno: idx + 1, line: line }); })
                .slice(Math.max(0, lineno - 1 - RANGE_LINES), lineno - 1 + RANGE_LINES)
                .map(function (_a) {
                var ln = _a.lineno, line = _a.line;
                return "" + (ln === lineno ? '>' : ' ') + ln + ": " + line;
            })
                .join('\n');
        }
        _this = _super.call(this, mainMsg + "\n" + positionInfo) || this;
        _this.lineno = lineno !== null && lineno !== void 0 ? lineno : null;
        _this.msg = msg;
        _this.src = src;
        _this.type = 'tefcha';
        return _this;
    }
    return TefchaError;
}(Error));
// after line starts with these, indent should exists
// except for 'while' of do-while statement.
var INDENT_KEYWORDS = [
    'if', 'else', 'elif', 'while', 'for', 'do',
    'switch', 'case', 'try', 'except',
];
var KEYWORDS = __spreadArrays(INDENT_KEYWORDS, ['continue', 'break', 'pass']);
var NODE_TYPES = __spreadArrays(KEYWORDS, ['program', 'none', 'text']);
var isIndentKeyword = function (obj) {
    return INDENT_KEYWORDS.includes(obj);
};
var isKeyword = function (obj) {
    return KEYWORDS.includes(obj);
};
var extractLineInfo = function (src, config) {
    var lineInfoList = [];
    var keptLine = ''; // string to keep line ends with '\'
    var commentStr = config.src.commentStr;
    var prevNest = [];
    src.split(/\r\n|\r|\n/).forEach(function (line, lineno) {
        // add 1 because lineno starts with 1
        lineno++;
        // concatenate previous line ends with '\'
        line = keptLine + line;
        // skip empty line
        if (line.trim() === '')
            return;
        // skip comment
        if (line.replace(/^[ \t]+/, '').startsWith(commentStr))
            return;
        // if the line ends with '\', keep it.
        if (line.endsWith('\\')) {
            keptLine = line.slice(0, -1);
            return;
        }
        var currentNest = [];
        var indentMatch = /^[ \t]+/.exec(line);
        if (indentMatch) {
            var indentStr = indentMatch[0];
            // remove indent from line
            line = line.slice(indentStr.length);
            while (indentStr.length > 0 && prevNest.length > 0) {
                if (indentStr.startsWith(prevNest[0])) {
                    var indent = prevNest[0];
                    currentNest.push(indent);
                    indentStr = indentStr.slice(indent.length);
                    prevNest.shift();
                }
                else {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'unexpected indent' });
                }
            }
            if (indentStr.length > 0) {
                currentNest.push(indentStr);
            }
        }
        // copy currentNest to prevNest
        prevNest = __spreadArrays(currentNest);
        keptLine = '';
        lineInfoList.push({
            lineno: lineno,
            line: line,
            nest: currentNest,
        });
    });
    if (keptLine !== '') {
        throw new TefchaError({ msg: "EOF is found after '\\'" });
    }
    // if all lines have same indent, remove the indent
    if (lineInfoList.every(function (l) { return l.nest.length > 0; })) {
        lineInfoList = lineInfoList.map(function (l) { return (__assign(__assign({}, l), { nest: l.nest.slice(1) })); });
    }
    return lineInfoList;
};
var _parse = function (lineInfoList, src) {
    var rootNode = {
        type: 'program',
        lineno: 0,
        content: '',
        children: [],
    };
    var nodeStack = [rootNode]; // stack to keep parents
    lineInfoList.forEach(function (_a) {
        var lineno = _a.lineno, line = _a.line, nest = _a.nest;
        // if unexpected indent exists, throw error
        if ((nodeStack.length - 1) < nest.length) {
            throw new TefchaError({ lineno: lineno, src: src, msg: 'unexpected indent' });
        }
        // if unindent is found, pop nodes from parents stack
        while ((nodeStack.length - 1) > nest.length) {
            nodeStack.pop();
        }
        var currentNode = nodeStack.slice(-1)[0];
        var firstWord = line.split(' ')[0];
        // simple text
        if (!isKeyword(firstWord)) {
            currentNode.children.push({
                type: 'text',
                lineno: lineno,
                content: line,
                children: [],
            });
        }
        else {
            var newNode = {
                type: firstWord,
                lineno: lineno,
                content: line.slice(line.indexOf(' ') + 1),
                children: [],
            };
            var lastChildNode = currentNode.children.length > 0 ?
                currentNode.children.slice(-1)[0] :
                null;
            currentNode.children.push(newNode);
            if (isIndentKeyword(firstWord)) {
                // 'while' of do-while do not have indent
                if (!(lastChildNode && lastChildNode.type === 'do' && firstWord === 'while')) {
                    nodeStack.push(newNode);
                }
            }
        }
    });
    return rootNode;
};
var validateAST = function (node, parents, src) {
    var children = node.children || [];
    var prevChild = {
        type: 'none',
        lineno: -1,
        content: '',
        children: [],
    };
    children.forEach(function (child, idx) {
        var lineno = child.lineno;
        switch (child.type) {
            case 'program':
                break;
            case 'none':
                throw new TefchaError({ lineno: lineno, src: src, msg: "node type \"" + child.type + "\" must not be here... this may be bug" });
            // break;
            case 'text':
                break;
            case 'if':
                break;
            case 'else':
                if (!['if', 'elif'].includes(prevChild.type)) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'before "else" statement, "if" or "elif" should exists.' });
                }
                break;
            case 'elif':
                if (!['if', 'elif'].includes(prevChild.type)) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'before "elif" statement, "if" or "elif" should exists.' });
                }
                break;
            case 'while':
                break;
            case 'for':
                throw new TefchaError({ lineno: lineno, src: src, msg: "node type \"" + child.type + "\" is not implemented yet." });
            // break;
            case 'switch':
                if (child.children.length === 0) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'switch block needs at least 1 case blocks' });
                }
                break;
            case 'case':
                if (node.type !== 'switch') {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'keyword "case" should be in "switch" statement.' });
                }
                break;
            case 'continue':
                if (!__spreadArrays(parents, [node]).some(function (n) { return ['for', 'while', 'do'].includes(n.type); })) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: '"continue" statement should be in loop' });
                }
                break;
            case 'break':
                if (!__spreadArrays(parents, [node]).some(function (n) { return ['for', 'while', 'do'].includes(n.type); })) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: '"break" statement should be in loop or "case".' });
                }
                break;
            case 'do':
                if (idx + 1 >= children.length || children[idx + 1].type !== 'while') {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'cannot find corresponding keyword "while" to keyword "do".' });
                }
                break;
            case 'pass':
                break;
            case 'try':
                if (idx + 1 >= children.length || children[idx + 1].type !== 'except') {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'cannot find corresponding keyword "except" to keyword "try".' });
                }
                break;
            case 'except':
                if (!['try', 'except'].includes(prevChild.type)) {
                    throw new TefchaError({ lineno: lineno, src: src, msg: 'before "except" block, "try" or "except" block should exists.' });
                }
                break;
            default:
                var _ = child.type;
                throw new TefchaError({ lineno: lineno, src: src, msg: "node type \"" + _ + "\" is invalid." });
        }
        prevChild = child;
    });
    if (node.type === 'switch') {
        children.forEach(function (child) {
            var lineno = child.lineno;
            if (child.type !== 'case') {
                throw new TefchaError({ lineno: lineno, src: src, msg: child.type + "\" is found in \"switch\" block. \"switch\" should have \"case\" only" });
            }
        });
    }
    children.forEach(function (child) { return validateAST(child, __spreadArrays(parents, [node]), src); });
};
var parse = function (src, config) {
    var lineInfoList = extractLineInfo(src, config);
    var node = _parse(lineInfoList, src);
    validateAST(node, [], src);
    return node;
};
export { parse, TefchaError, };
//# sourceMappingURL=parser.js.map
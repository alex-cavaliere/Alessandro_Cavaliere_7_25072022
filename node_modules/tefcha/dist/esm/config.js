var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var STROKE_COLOR = 'black';
var defaultConfig = {
    src: {
        // NOTE: this config is not used and any indent is available now
        indentStr: '  ',
        // line starts with this character is skipped by parser.
        commentStr: '#',
    },
    flowchart: {
        //                       svg width
        //          <------------------------------------>
        //        ^ +------------------------------------+
        //        | |                                    | ^
        // svg    | |                                    | | marginY
        // height | |                                    | v
        //        | |       +-------------------+        |
        //        | |       | flowchart         |        |
        //        | |       |                   |        |
        //        | |       |                   |        |
        //        | |       |                   |        |
        //        | |       |                   |        |
        //        | |       +-------------------+        |
        //        | |                                    | ^
        //        | |                                    | | marginY
        //        | |                                    | v
        //        v +------------------------------------+
        //          <------>                     <------->
        //           marginX                      marginX
        marginX: 35,
        marginY: 35,
        // branch1        branch2
        // +-----+        +-----+
        // | aaa |        | aaa |
        // +--+--+        +--+--+
        //    |              |
        //    |              |
        //    |              |
        // +--+--+        +--+--+
        // | bbb |        | bbb |
        // +-----+        +-----+
        //
        //       <------->
        //         stepX
        stepX: 24,
        // +-----+
        // | aaa |
        // +--+--+    ^
        //    |       |
        //    |       | stepY
        //    |       |
        // +--+--+    v
        // | bbb |
        // +-----+
        stepY: 24,
        //      +-----+
        //      | aaa |
        //      +--+--+    
        //         |       
        //         |       
        //         |    hline
        //  <-----------------............ ^
        //         |                       |
        //         |                       | hlineMargin
        //         |                       |
        //      +--+--+................... v
        //      | bbb |
        //      +-----+
        hlineMargin: 24,
        // NOTE:
        // '' or 'none' or 'transparent' means no background rectangle.
        backgroundColor: 'white',
    },
    rect: {
        // +------------------------------------+
        // |                                    | ^
        // |                                    | | padY
        // |                                    | v
        // |          ###          ###          |
        // |         ## ##        ## ##         |
        // |        ##   ##      ##   ##        |
        // |       ##     ##    ##     ##       |
        // |       #########    #########       |
        // |       ##     ##    ##     ##       |
        // |       ##     ##    ##     ##       |
        // |                                    | ^
        // |                                    | | padY
        // |                                    | v
        // +------------------------------------+
        // <------>                     <------->
        //   padX                          padX
        padX: 12,
        padY: 8,
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': 'none',
            'stroke-width': '2px',
        },
    },
    frame: {
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': 'none',
            'stroke-dasharray': '2',
            'stroke-width': '2px',
        },
    },
    diamond: {
        //              _
        //          _.-' '-._          ^
        //      _.-'         '-._      |
        //  _.-'                 '-._  |
        // '-._                   _.-' | height
        //     '-._           _.-'     |
        //         '-._   _.-'         |
        //             '-'             v
        // <------------------------->
        //  width
        //
        // diamondAspectRatio = height / width
        aspectRatio: 3 / 4,
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': 'none',
            'stroke-width': '2px',
        },
    },
    path: {
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': 'none',
            'stroke-linecap': 'square',
            'stroke-width': '2px',
        },
    },
    arrowHead: {
        size: 9,
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': STROKE_COLOR,
            'stroke-width': '0px',
        },
    },
    text: {
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': STROKE_COLOR,
            'font-size': '14px',
            'stroke-width': '0',
        },
    },
    label: {
        yesText: 'Y',
        noText: 'N',
        marginX: 4,
        marginY: 4,
        attrs: {
            'stroke': STROKE_COLOR,
            'fill': STROKE_COLOR,
            'font-size': '10px',
            'font-weight': 'lighter',
        },
    },
};
var mergeConfig = function (baseConfig, config) {
    if (config === void 0) { config = {}; }
    return {
        src: __assign(__assign({}, baseConfig.src), (config.src || {})),
        flowchart: __assign(__assign({}, baseConfig.flowchart), (config.flowchart || {})),
        rect: __assign(__assign(__assign({}, baseConfig.rect), (config.rect || {})), { attrs: __assign(__assign({}, baseConfig.rect.attrs), (config.rect && config.rect.attrs || {})) }),
        diamond: __assign(__assign(__assign({}, baseConfig.diamond), (config.diamond || {})), { attrs: __assign(__assign({}, baseConfig.diamond.attrs), (config.diamond && config.diamond.attrs || {})) }),
        path: __assign(__assign(__assign({}, baseConfig.path), (config.path || {})), { attrs: __assign(__assign({}, baseConfig.path.attrs), (config.path && config.path.attrs || {})) }),
        arrowHead: __assign(__assign(__assign({}, baseConfig.arrowHead), (config.arrowHead || {})), { attrs: __assign(__assign({}, baseConfig.arrowHead.attrs), (config.arrowHead && config.arrowHead.attrs || {})) }),
        text: __assign(__assign(__assign({}, baseConfig.text), (config.text || {})), { attrs: __assign(__assign({}, baseConfig.text.attrs), (config.text && config.text.attrs || {})) }),
        frame: __assign(__assign(__assign({}, baseConfig.frame), (config.frame || {})), { attrs: __assign(__assign({}, baseConfig.frame.attrs), (config.frame && config.frame.attrs || {})) }),
        label: __assign(__assign(__assign({}, baseConfig.label), (config.label || {})), { attrs: __assign(__assign({}, baseConfig.label.attrs), (config.label && config.label.attrs || {})) }),
    };
};
var mergeDefaultConfig = function (config) {
    if (config === void 0) { config = {}; }
    return mergeConfig(defaultConfig, config);
};
export { defaultConfig, mergeConfig, mergeDefaultConfig };
//# sourceMappingURL=config.js.map
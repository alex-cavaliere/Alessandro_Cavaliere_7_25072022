import { MeasureTextFunc, Shape, Text, Rect, Frame, Diamond, Path } from '../shape';
import { Config } from '../config';
interface Layers {
    frameLayer: SVGElement;
    textLayer: SVGElement;
    nodeLayer: SVGElement;
    pathLayer: SVGElement;
}
interface RenderParam {
    src: string;
    config?: Config;
    document: Document;
}
declare class Renderer {
    readonly dummySVG: SVGElement;
    readonly svg: SVGElement;
    readonly _document: Document;
    readonly src: string;
    readonly config: Config;
    readonly labelHeight: number;
    readonly textHeight: number;
    constructor({ src, config, document, }: RenderParam);
    el: (tagName: string, attrs?: any, ...children: (Element | string)[]) => SVGElement;
    createTextSVGElement: (text: string, attrs?: any) => SVGElement;
    measureText: MeasureTextFunc;
    renderShape: ({ layers, shape, offsetX, offsetY, }: {
        layers: Layers;
        shape: Shape;
        offsetX?: number | undefined;
        offsetY?: number | undefined;
    }) => void;
    renderText: ({ x, y, shape, }: {
        x: number;
        y: number;
        shape: Text;
    }) => SVGElement;
    renderRect: ({ x, y, shape, }: {
        x: number;
        y: number;
        shape: Rect;
    }) => SVGElement;
    renderFrame: ({ x, y, shape, }: {
        x: number;
        y: number;
        shape: Frame;
    }) => SVGElement;
    renderDiamond: ({ x, y, shape, }: {
        x: number;
        y: number;
        shape: Diamond;
    }) => SVGElement;
    renderPath: ({ x, y, shape, }: {
        x: number;
        y: number;
        shape: Path;
    }) => SVGElement;
    render: () => SVGElement;
}
declare const render: (param: RenderParam) => SVGElement;
export { render, Renderer, };
//# sourceMappingURL=svg.d.ts.map